
import java.sql.Connection;
import java.sql.PreparedStatement;
import java.sql.ResultSet;
import java.sql.ResultSetMetaData;
import java.sql.SQLException;
import java.sql.Statement;
import java.sql.Types;
import java.text.DateFormat;
import java.text.SimpleDateFormat;
import java.util.HashMap;
import java.util.Vector;
import javax.swing.JOptionPane;
import javax.swing.JTable;
import javax.swing.table.DefaultTableModel;

/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */

/**
 *
 * @author workstation
 */
public class Schedule extends javax.swing.JFrame {

    /**
     * Creates new form SecondUI
     */
    
    public int contact_id;
    public Schedule() {
        initComponents();
    }
    public Schedule(int contact_id)
    {
        initComponents();
        this.contact_id = contact_id;
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jLabel1 = new javax.swing.JLabel();
        jScheduleType = new javax.swing.JTextField();
        jLabel2 = new javax.swing.JLabel();
        jLabel3 = new javax.swing.JLabel();
        jScrollPane1 = new javax.swing.JScrollPane();
        jDescription = new javax.swing.JTextArea();
        jScrollPane2 = new javax.swing.JScrollPane();
        jTable1 = new javax.swing.JTable();
        jSearch = new javax.swing.JButton();
        jAdd = new javax.swing.JButton();
        jEdit = new javax.swing.JButton();
        jSave = new javax.swing.JButton();
        jDelete = new javax.swing.JButton();
        jClear = new javax.swing.JButton();
        jScheduleDate = new javax.swing.JTextField();

        setDefaultCloseOperation(javax.swing.WindowConstants.DISPOSE_ON_CLOSE);
        setTitle("Event Scheduler");

        jLabel1.setText("Schedule Type");

        jLabel2.setText("Schedule Date YYYY-MM-DD");

        jLabel3.setText("Description");

        jDescription.setColumns(20);
        jDescription.setRows(5);
        jScrollPane1.setViewportView(jDescription);

        jTable1.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null, null, null, null, null},
                {null, null, null, null, null, null},
                {null, null, null, null, null, null},
                {null, null, null, null, null, null}
            },
            new String [] {
                "schedule_id", "Sch Type", "Sch Date", "contact_id", "description", "date added"
            }
        ));
        jScrollPane2.setViewportView(jTable1);

        jSearch.setText("Search");
        jSearch.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jSearchActionPerformed(evt);
            }
        });

        jAdd.setText("Add");
        jAdd.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jAddActionPerformed(evt);
            }
        });

        jEdit.setText("Edit");
        jEdit.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jEditActionPerformed(evt);
            }
        });

        jSave.setText("Save");
        jSave.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jSaveActionPerformed(evt);
            }
        });

        jDelete.setText("Delete");
        jDelete.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jDeleteActionPerformed(evt);
            }
        });

        jClear.setText("Clear");
        jClear.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jClearActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jScrollPane2, javax.swing.GroupLayout.DEFAULT_SIZE, 506, Short.MAX_VALUE)
                    .addGroup(layout.createSequentialGroup()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(layout.createSequentialGroup()
                                .addComponent(jLabel1)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(jScheduleType, javax.swing.GroupLayout.PREFERRED_SIZE, 75, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addGap(27, 27, 27)
                                .addComponent(jLabel2)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                                .addComponent(jScheduleDate, javax.swing.GroupLayout.PREFERRED_SIZE, 80, javax.swing.GroupLayout.PREFERRED_SIZE))
                            .addGroup(layout.createSequentialGroup()
                                .addComponent(jLabel3)
                                .addGap(18, 18, 18)
                                .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 186, javax.swing.GroupLayout.PREFERRED_SIZE))
                            .addGroup(layout.createSequentialGroup()
                                .addComponent(jSearch)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(jAdd)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(jEdit)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(jSave)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(jDelete)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(jClear)))
                        .addGap(0, 0, Short.MAX_VALUE)))
                .addContainerGap())
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel1)
                    .addComponent(jScheduleType, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel2)
                    .addComponent(jScheduleDate, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(18, 18, 18)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jLabel3)
                    .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 62, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(jScrollPane2, javax.swing.GroupLayout.PREFERRED_SIZE, 122, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jSearch)
                    .addComponent(jAdd)
                    .addComponent(jEdit)
                    .addComponent(jSave)
                    .addComponent(jDelete)
                    .addComponent(jClear))
                .addContainerGap(72, Short.MAX_VALUE))
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void jSearchActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jSearchActionPerformed
        DBConnection conn = null;
        Connection connection = null;
        Statement statement = null;

        try
        {
            conn = new DBConnection();
            connection = conn.connectDB();
            statement = connection.createStatement();

            String type = jScheduleType.getText();
            String schedule_date = jScheduleDate.getText();  
            String description  = jDescription.getText();

            HashMap HM = new HashMap();
            HM.put("type",type);
            HM.put("schedule_date",schedule_date);
            HM.put("description",description);
           
            String queryString = "SELECT schedule_id,type,schedule_date,contact_id,description,date_added"
                    + " FROM Schedule";
                    
            if(!"".equals(HM.get("type")))
            {
                queryString += " AND type="+"'"+HM.get("type")+"'";
            }
            if(!"".equals(HM.get("schedule_date")))
            {
                queryString += " AND schedule_date="+"'"+HM.get("schedule_date")+"'";
            }
            if(!"".equals(HM.get("description")))
            {
                queryString += " AND description="+"'"+HM.get("description")+"'";
            }

            ResultSet rs = statement.executeQuery(queryString);
   
            // It creates and displays the table
            jTable1 = new JTable(buildTableModel(rs));
            jScrollPane2.getViewport().add(jTable1);
           //connection.close(); 
        }
        catch (Exception e)
        {
            e.printStackTrace();
        }
        finally {
            try{
                connection.close();
            }
            catch (Exception e)
            {
                e.printStackTrace();
            }
        }
    }//GEN-LAST:event_jSearchActionPerformed

 /**
 * Something magical happens inside
*/  
public static DefaultTableModel buildTableModel(ResultSet rs)
        throws SQLException {

    ResultSetMetaData metaData = rs.getMetaData();

    // names of columns
    Vector<String> columnNames = new Vector<String>();
    int columnCount = metaData.getColumnCount();
    for (int column = 1; column <= columnCount; column++) {
        columnNames.add(metaData.getColumnName(column));
    }

    // data of the table
    Vector<Vector<Object>> data = new Vector<Vector<Object>>();
    while (rs.next()) {
        Vector<Object> vector = new Vector<Object>();
        for (int columnIndex = 1; columnIndex <= columnCount; columnIndex++) {
            vector.add(rs.getObject(columnIndex));
        }
        data.add(vector);
    }

    return new DefaultTableModel(data, columnNames);

}

    private void jAddActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jAddActionPerformed
        DBConnection conn = null;
        Connection connection = null;
        Statement statement = null;
        try{
            //System.out.println("contact_id:"+contact_id);
            String type = jScheduleType.getText();
            String description = jDescription.getText();
            String date = jScheduleDate.getText();
            if("".equals(type) || "".equals(date)){
                throw new NullPointerException();
            }
            
            conn = new DBConnection();
            connection = conn.connectDB();
            statement = connection.createStatement();
            
            String querySequence = "SELECT NEXT VALUE FOR dbo.cmsequence;";
            int sequence = 0;
            ResultSet rs = statement.executeQuery(querySequence);
            //int sequence = rs.getInt(1);
            //System.out.println(sequence);
            while (rs.next())
            {
                sequence = rs.getInt(1);
                System.out.println("sequence:"+sequence);
            }
            
            String query = "INSERT INTO Schedule VALUES(?,?,?,?,?,?)";
            PreparedStatement pstmt = connection.prepareStatement(query); 
            
                          
            DateFormat df = new SimpleDateFormat("yyyy-mm-dd");
            java.sql.Date sqlDOB = new java.sql.Date(df.parse(date).getTime());
            
            java.util.Date utilDate = new java.util.Date();
            java.sql.Date dateAdded = new java.sql.Date(utilDate.getTime());
            
            pstmt.setInt(1, sequence);
            pstmt.setString(2,type);  
            pstmt.setString(3, sqlDOB.toString());
            pstmt.setInt(4,contact_id);
            pstmt.setString(5, description);
            pstmt.setString(6, dateAdded.toString());
            pstmt.executeUpdate(); 
            // System.out.println("Schedule added successfully");
            
            // Clearing the FORM
            clear();

            // Update Table
            refreshView(statement);            
        }
        catch (NullPointerException ne)
        {
            // e.printStackTrace();
            JOptionPane.showMessageDialog(null, "Schedule Type or Schedule Date cannot be empty");
        }
        catch (Exception e)
        {
            e.printStackTrace();
        }
        finally {
            try{
                connection.close();
            }
            catch (Exception e)
            {
                e.printStackTrace();
            }
        }
    }//GEN-LAST:event_jAddActionPerformed

    private void jEditActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jEditActionPerformed
        // TODO add your handling code here:
        int[] row_indexes=jTable1.getSelectedRows();
        try{
            if(row_indexes.length != 1){
                throw new NullPointerException();
            }
            jScheduleType.setText(String.valueOf(jTable1.getValueAt(row_indexes[0], 1)));
            jScheduleDate.setText(String.valueOf(jTable1.getValueAt(row_indexes[0], 2)));
            jDescription.setText(String.valueOf(jTable1.getValueAt(row_indexes[0], 4)));
        }
        catch (NullPointerException ne)
        {
            // e.printStackTrace();
            JOptionPane.showMessageDialog(null, "Select only 1 row to edit");
        }
        catch (Exception e)
        {
            e.printStackTrace();
            // TODO: Something
        }
    }//GEN-LAST:event_jEditActionPerformed

    private void jSaveActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jSaveActionPerformed
        DBConnection conn = null;
        Connection connection = null;
        Statement statement = null;
        
        try{
        String type = jScheduleType.getText();
        String date = jScheduleDate.getText();
        String description = jDescription.getText();
        if("".equals(type) || "".equals(date)){
            throw new NullPointerException();
        }

        conn = new DBConnection();
        connection = conn.connectDB();
        statement = connection.createStatement();
        
        int[] row_indexes=jTable1.getSelectedRows();
        if(row_indexes.length != 1){
                throw new ArrayIndexOutOfBoundsException();
        }

        int schedule_id = Integer.parseInt(jTable1.getValueAt(row_indexes[0], 0).toString());

        String queryString1 = "UPDATE Schedule SET type=?,schedule_date=?,description=? WHERE schedule_id=?";
        
        DateFormat df = new SimpleDateFormat("yyyy-mm-dd");
        java.sql.Date sqlDOB = new java.sql.Date(df.parse(date).getTime());

        PreparedStatement pstmt1 = connection.prepareStatement(queryString1);
        pstmt1.setString(1, type);
        pstmt1.setString(2, sqlDOB.toString()); 
        pstmt1.setString(3, description);
        pstmt1.setInt(4, schedule_id);
        pstmt1.executeUpdate();
        
        // Clearing the FORM
        clear();

        // Update Table
        refreshView(statement);
        
        }

        catch (NullPointerException ne)
        {
            // e.printStackTrace();
            JOptionPane.showMessageDialog(null, "Schedule Type or Schedule Date cannot be empty");
        }
        catch (ArrayIndexOutOfBoundsException oobe)
        {
            // e.printStackTrace();
            // TODO: Something
            JOptionPane.showMessageDialog(null, "Select only 1 row to Edit first then Save");
        }
        catch (Exception e)
        {
            e.printStackTrace();
        }
        finally {
            try{
                connection.close();
            }
            catch (Exception e)
            {
                e.printStackTrace();
            }
        }
    }//GEN-LAST:event_jSaveActionPerformed

    private void jDeleteActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jDeleteActionPerformed
        DBConnection conn = null;
        Connection connection = null;
        Statement statement = null;
        
        try{
            int[] row_indexes=jTable1.getSelectedRows();
            int schedule_id = Integer.parseInt(jTable1.getValueAt(row_indexes[0], 0).toString());
            //System.out.println("sequence:"+sequence);
            if(row_indexes.length != 1){
                throw new NullPointerException();
            }
            conn = new DBConnection();
            connection = conn.connectDB();
            statement = connection.createStatement();
            
            String queryString1 = "DELETE FROM Schedule WHERE schedule_id = ?";
            PreparedStatement pstmt1 = connection.prepareStatement(queryString1); 
            pstmt1.setInt(1, schedule_id);
            pstmt1.executeUpdate();
            
            // Clearing the FORM
            clear();

            // Update Table
            refreshView(statement);
        }
        catch (NullPointerException ne)
        {
            // e.printStackTrace();
            JOptionPane.showMessageDialog(null, "Select only 1 row to delete");
        }
        catch (ArrayIndexOutOfBoundsException oobe)
        {
            // e.printStackTrace();
            // TODO: Something
            JOptionPane.showMessageDialog(null, "Select only 1 row to delete");
        }
        catch (Exception e)
        {
            e.printStackTrace();
            // TODO: Something
        }
        finally {
            try{
                connection.close();
            }
            catch (Exception e)
            {
                e.printStackTrace();
            }
        }
    }//GEN-LAST:event_jDeleteActionPerformed

    private void jClearActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jClearActionPerformed
        clear();
    }//GEN-LAST:event_jClearActionPerformed

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(Schedule.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(Schedule.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(Schedule.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(Schedule.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new Schedule().setVisible(true);
            }
        });
    }
    
    // Method to clear the Form
    public void clear(){
        jScheduleType.setText("");
        jScheduleDate.setText("");
        jDescription.setText("");
    }

    // Method to display fresh data
    public void refreshView(Statement statement){
        try{
            // Updating jTable
            String queryString = "SELECT schedule_id,type,schedule_date,contact_id,description,date_added"
                    + " FROM Schedule";
            ResultSet rs = statement.executeQuery(queryString);
            jTable1 = new JTable(buildTableModel(rs));
            jScrollPane2.getViewport().add(jTable1);
        }
        catch (Exception e)
        {
            e.printStackTrace();
            // TODO: Something
        }
    }
    
    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton jAdd;
    private javax.swing.JButton jClear;
    private javax.swing.JButton jDelete;
    private javax.swing.JTextArea jDescription;
    private javax.swing.JButton jEdit;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JButton jSave;
    private javax.swing.JTextField jScheduleDate;
    private javax.swing.JTextField jScheduleType;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JScrollPane jScrollPane2;
    private javax.swing.JButton jSearch;
    private javax.swing.JTable jTable1;
    // End of variables declaration//GEN-END:variables
}
